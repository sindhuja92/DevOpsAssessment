{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormationvTemplate for WordPress_Chef",

  "Parameters" : {

    "KeyName": {
      "Description" : "Name of an existing EC2 key pair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
     "Description" : "Web Server EC2 instance type",
     "Type" : "String",
     "Default" : "t2.small",
     "AllowedValues" : [ "t2.micro", "t2.small"],
     "ConstraintDescription" : "must be a valid EC2 instance type."
   },
   "Tag" : {
        "Description" : "Tag for resurces created by the template",
        "Type" : "String",
        "Default" : "MyCFT"
    },
   "SSHLocation": {
     "Description": "The IP address range that can be used to SSH to the EC2 instances",
     "Type": "String",
     "MinLength": "9",
     "MaxLength": "18",
     "Default": "0.0.0.0/0",
     "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
     "ConstraintDescription": "must be a valid IP CIDR range of the for x.x.x.x/x."
   },

    "AdminPassword": {
        "Description": "Wordpress administrator password",
      "Type": "String",
      "Default": "CustomPassword",
      "ConstraintDescription": "Must be a valid password"
    },

    "HostName": {
      "Description": "Database Endpoint",
      "Type": "String",
      "Default": "localhost",
      "ConstraintDescription": "Endpoint of the MYSQL DB"
    },

     "DBPort": {
       "Description": "Database Endpoint port",
       "Type": "String",
       "Default": "3306",
       "ConstraintDescription": "Endpoint port for MySQL DB"
     },

     "DBName": {
       "Description": "Name of the database",
       "Type": "String",
       "Default": "wordpressdb",
       "MinLength": "1",
       "MaxLength": "64",
       "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
       "ConstraintDescription": "Must begin with a letter and can contain any combo of letters and digits."
     },

     "DBUser": {
       "NoEcho": "true",
       "Description": "The username of wordpress db admin",
       "Type": "String",
       "MinLength": "1",
       "MaxLength": "15",
       "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
       "ConstraintDescription": "Must begin with a letter and can contain any combo of letters and digits."
     },

     "DBPassword": {
       "NoEcho": "true",
       "Description": "The password of wordpress db admin",
       "Type": "String",
       "MinLength": "8",
       "MaxLength": "41",
       "AllowedPattern": "[a-zA-Z0-9]*",
       "ConstraintDescription": "Can contain combo of letters and digits."
     }
   },

   "Mappings": {
     "RegionMap": {
       "us-east-1": {
         "AMI": "ami-6869aa05"
       },
       "us-east-2": {
         "AMI": "ami-0932686c"
       },
       "us-west-1": {
         "AMI": "ami-2cade64c"
       },
       "us-west-2": {
         "AMI": "ami-6f68cf0f"
     },
     "eu-west-1": {
       "AMI": "ami-f9dd458a"
     },
     "eu-west-2": {
       "AMI": "ami-886369ec"
     }
   }
 },

   "Resources": {
     "VPC": {
       "Type": "AWS::EC2::VPC",
       "Properties": {
         "CidrBlock": "10.0.0.0/16",
         "Tags": [ { "Key": "Name", "Value" : { "Fn::Join" : [ "-", [{ "Ref" : "Tag" }, "VPC" ] ] } } ]
       }
     },

     "subnet": {
       "Type": "AWS::EC2::Subnet",
       "Properties": {
         "VpcId": {
           "Ref": "VPC"
         },
         "CidrBlock": "10.0.1.0/24",
         "Tags": [ { "Key": "Name", "Value" : { "Fn::Join" : [ "-", [{ "Ref" : "Tag" }, "subnet" ] ] } } ]
       }
     },

     "igw" : {
    "Type" : "AWS::EC2::InternetGateway",
    "Properties" : {
      "Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [{ "Ref" : "Tag" }, "igw" ] ] } } ]
    }
   },

   "igwAttachment" : {
   "Type" : "AWS::EC2::VPCGatewayAttachment",
   "Properties" : {
   "VpcId" : { "Ref" : "VPC" },
   "InternetGatewayId" : { "Ref" : "igw" }
  }
  },

  "RouteTable": {
    "Type": "AWS::EC2::RouteTable",
    "Properties": {
      "VpcId": {
        "Ref": "VPC"
      },
      "Tags": [ { "Key": "Name", "Value" : { "Fn::Join" : [ "-", [{ "Ref" : "Tag" }, "RouteTable" ] ] } } ]
    }
  },

  "Route": {
    "Type": "AWS::EC2::Route",
    "DependsOn": "igwAttachment",
    "Properties": {
      "RouteTableId": { "Ref": "RouteTable" },
      "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": { "Ref": "igw" }
  }
},

  "SubnetRouteTableAssociation": {
    "Type": "AWS::EC2::SubnetRouteTableAssociation",
    "Properties": {
      "SubnetId": {
        "Ref": "subnet"
      },
      "RouteTableId": {
        "Ref": "RouteTable"
      }
    }
  },

  "IPAddress": {
    "Type": "AWS::EC2::EIP",
    "DependsOn": "igwAttachment",
    "Properties": {
      "Domain": "vpc",
      "InstanceId": {
        "Ref": "EC2Instance"
      }
    }
  },

  "WebSecurityGroup": {
    "Type": "AWS::EC2::SecurityGroup",
    "Properties": {
      "GroupDescription": "Enable SSH and HTTP access via 22 and 80",
      "VpcId": {
        "Ref": "VPC"
      },
      "SecurityGroupIngress": [
        {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Ref": "SSHLocation"
          }

        },
        {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }

      ]
    }
  },

  "EC2Instance":{
    "Type": "AWS::EC2::Instance",
    "DependsOn": "igwAttachment",
    "Metadata": {
    "AWS::CloudFormation::Init": {
      "configSets": {
        "wordpress_install": [
          "install_cfn",
          "install_chefdk",
          "install_chef",
          "install_wordpress",
          "run_chef"
        ]
      },
      "install_cfn": {
        "files": {
          "/etc/cfn/cfn-hup.conf": {
            "content": { "Fn::Join": [ "", [
              "[main]\n",
              "stack=", { "Ref": "AWS::StackId" }, "\n",
              "region=", { "Ref": "AWS::Region" }, "\n"
            ]]},
            "mode"  : "000400",
            "owner" : "root",
            "group" : "root"
          },
          "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
            "content": { "Fn::Join": [ "", [
              "[cfn-auto-reloader-hook]\n",
              "triggers=post.update\n",
              "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
              "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ", { "Ref" : "AWS::StackName" },
                      "         --resource LaunchConfig ",
                      "         --configsets wordpress_install ",
                      "         --region ", { "Ref" : "AWS::Region" }, "\n"
            ]]},
            "mode"  : "000400",
            "owner" : "root",
            "group" : "root"
          }
        },
        "services" : {
          "sysvinit" : {
            "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                          "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
          }
        }
      },

      "install_chefdk" : {
        "packages" : {
          "rpm" : {
            "chefdk" : "https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.2.0-2.el6.x86_64.rpm"
          }
        }
      },

      "install_chef" : {
        "sources" : {
          "/var/chef/chef-repo" : "http://github.com/opscode/chef-repo/tarball/master"
        },
        "files" : {
          "/tmp/install.sh" : {
            "source" : "https://www.opscode.com/chef/install.sh",
            "mode"  : "000400",
            "owner" : "root",
            "group" : "root"
          },
          "/var/chef/chef-repo/.chef/knife.rb" : {
            "content" : { "Fn::Join": [ "", [
              "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
              "node_path [ '/var/chef/chef-repo/nodes' ]\n"
            ]]},
            "mode"  : "000400",
            "owner" : "root",
            "group" : "root"
          },
          "/var/chef/chef-repo/.chef/client.rb" : {
            "content" : { "Fn::Join": [ "", [
              "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
              "node_path [ '/var/chef/chef-repo/nodes' ]\n"
            ]]},
            "mode"  : "000400",
            "owner" : "root",
            "group" : "root"
          }
        },
        "commands" : {
          "01_make_chef_readable" : {
            "command" : "chmod +rx /var/chef"
          },
          "02_install_chef" : {
            "command" : "bash /tmp/install.sh",
            "cwd"  : "/var/chef"
          },
          "03_create_node_list" : {
            "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
            "cwd" : "/var/chef/chef-repo",
            "env" : { "HOME" : "/var/chef" }
          }
        }
      },

      "install_wordpress" : {
        "files" : {
          "/var/chef/chef-repo/.chef/knife.rb" : {
            "content" : { "Fn::Join": [ "", [
              "cookbook_path [ '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]\n",
              "node_path [ '/var/chef/chef-repo/nodes' ]\n"
            ]]},
            "mode"  : "000400",
            "owner" : "root",
            "group" : "root"
          },
          "/var/chef/chef-repo/.chef/client.rb" : {
            "content" : { "Fn::Join": [ "", [
              "cookbook_path [ '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]\n",
              "node_path [ '/var/chef/chef-repo/nodes' ]\n"
            ]]},
            "mode"  : "000400",
            "owner" : "root",
            "group" : "root"
          },
          "/var/chef/chef-repo/cookbooks/wordpress/attributes/localdatabase.rb" : {
            "content": { "Fn::Join": [ "", [
              "node['wordpress']['db']['pass'] = '", {"Ref" : "DBPassword"}, "'\n",
              "node['wordpress']['db']['user'] = '", {"Ref" : "DBUser"}, "'\n",
              "node['wordpress']['db']['host'] = '", {"Ref" : "HostName"}, "'\n",
              "node['wordpress']['db']['name'] = '", {"Ref" : "DBName"}, "'\n"

            ]]},
            "mode"  : "000400",
            "owner" : "root",
            "group" : "root"
          }
        },
        "commands" : {
          "01_get_cookbook" : {
            "command" : "knife cookbook site download wordpress",
            "cwd" : "/var/chef/chef-repo",
            "env" : { "HOME" : "/var/chef" }
          },
          "02_unpack_cookbook" : {
            "command" : "tar xvfz /var/chef/chef-repo/wordpress*",
            "cwd" : "/var/chef/chef-repo/cookbooks"
          },
          "03_init_berkshelf": {
            "command" : "berks init /var/chef/chef-repo/cookbooks/wordpress --skip-vagrant --skip-git",
            "cwd" : "/var/chef/chef-repo/cookbooks/wordpress",
            "env" : { "HOME" : "/var/chef" }
          },
          "04_vendorize_berkshelf" : {
            "command" : "berks vendor",
            "cwd" : "/var/chef/chef-repo/cookbooks/wordpress",
            "env" : { "HOME" : "/var/chef" }
          },
          "05_configure_node_run_list" : {
            "command" : "knife node run_list add -z `knife node list -z` recipe[wordpress]",
            "cwd" : "/var/chef/chef-repo",
            "env" : { "HOME" : "/var/chef" }
          }
        }
      },

      "run_chef" : {
        "commands" : {
          "01_run_chef_client" : {
            "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
            "cwd" : "/var/chef/chef-repo",
            "env" : { "HOME" : "/var/chef" }
          }
        }
      }
    }
  },

  "Properties": {
    "ImageId": {
      "Fn::FindInMap": ["RegionMap", { "Ref": "AWS::Region" }, "AMI"]
    },
    "InstanceType": { "Ref": "InstanceType" },
    "KeyName": { "Ref": "KeyName" },
    "Tags": [ {"Key": "Name", "Value" : { "Fn::Join" : [ "-", [{ "Ref" : "Tag" }, "EC2Instance" ] ] } } ],
    "NetworkInterfaces": [ {
      "AssociatePublicIpAddress": "true",
      "DeviceIndex": "0",
      "GroupSet": [{ "Ref": "WebSecurityGroup" }],
      "SubnetId": { "Ref": "subnet"}
       } ],
       "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                      "#!/bin/bash -xe\n",
                      "yum update -y aws-cfn-bootstrap\n",

                      "/opt/aws/bin/cfn-init -v ",
                      "         --stack ", { "Ref" : "AWS::StackName" },
                      "         --resource LaunchConfig ",
                      "         --configsets wordpress_install ",
                      "         --region ", { "Ref" : "AWS::Region" }, "\n",

                      "/opt/aws/bin/cfn-signal -e $? ",
                      "         --stack ", { "Ref" : "AWS::StackName" },
                      "         --resource WebServerGroup ",
                      "         --region ", { "Ref" : "AWS::Region" }, "\n"
       ]]}}
  }
  }
},

"Outputs" : {
  "WebsiteURL" : {
    "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ]}]]},
    "Description" : "WordPress website"
  }
 }
}
